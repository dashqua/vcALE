#!/bin/bash
echo "bendingColumn Validation test" 
echo ''

greenOK() {
  echo "\033[0;32mOK\033[m"
}
OK=$(greenOK)


redoTest=false
read -p "Rerun simulations : [y/N] " yn
case $yn in
	[nN]* ) redoTest=false;;
	[yY]* ) redoTest=true;;
	* ) "Please answer yes or know.";;
esac


if $redoTest; then
## Run the cases
for MESH in 625 3969 28033;
do
cd bendingColumnLM_TLF_$MESH
./clean > /dev/null 
./run > /dev/null &
echo " Running bendingColumnLM_TLF_$MESH"
sleep 3
cd ..
cd bendingColumnLM_ALE_$MESH
./clean > /dev/null
./run /dev/null &
echo " Running bendingColumnLM_ALE_$MESH"
sleep 3
cd ..
done;

sleep 5;

testEnd=""
End="End"
echo ''
while [[ "$testEnd1" != *"$End"* ]] 
do
	testEnd1="$(tail -n2 bendingColumnLM_TLF_$MESH/log.vcALEFoam | head -n1)"
	echo -e "\e[1A\e[K mesh $MESH - TLF: $(tail -n5 bendingColumnLM_TLF_$MESH/log.vcALEFoam | head -n1 | awk -e '/=/ {print ($4)}' ) \
		ALE:	$(tail -n5 bendingColumnLM_ALE_$MESH/log.vcALEFoam | head -n1 | awk -e '/=/ {print ($4)}' )"
	sleep 3
done;

fi

# Get the data and plot it
echo ''
for MESH in 625 3969 28033;
do

cd bendingColumnLM_TLF_$MESH
echo " Getting data from ${PWD##*/} [..]"
analyticalSolution_vcALE > data.txt
awk -e '/newX/ {print ($3,$7,$8,$9)} ' data.txt | sed  "s/[()]//g" > data_TLF_$MESH.txt;
mv data_TLF_$MESH.txt ..
rm *.txt
echo -e "\e[1A\e[K Getting data from ${PWD##*/} [$OK]"
cd ..

cd bendingColumnLM_ALE_$MESH
analyticalSolution_vcALE > data.txt
echo " Getting data from ${PWD##*/} [..]"
awk -e '/newX/ {print ($3,$7,$8,$9)} ' data.txt | sed  "s/[()]//g" > data_ALE_$MESH.txt;
mv data_ALE_$MESH.txt ..
rm *.txt
echo -e "\e[1A\e[K Getting data from ${PWD##*/} [$OK]"
cd ..

done;


echo " Plotting the data [..]"
gnuplot -e " \
   set style line 1 lt 2 lc rgb 'red' lw 3; \
   set term pngcairo dashed size 1280,800; \
   set output   'graph.png'; \
   set multiplot layout 3,3 title 'Comparison of components of Displacements at node (-0.5,6.0,0.5)'; \
   set xlabel 'time (s)'; \
   set ylabel 'X (m)'; \
   set title 'X component - 625 nodes'; \
   p 'data_TLF_625.txt' u 1:2 w l t 'X - TLF' lt rgb 'red', \
     'data_ALE_625.txt' u 1:2 w l t 'X - ALE' lt rgb 'blue'; \
   set ylabel 'Y (m)'; \
   set title 'Y component - 625 nodes'; \
   p 'data_TLF_625.txt' u 1:3 w l t 'Y - TLF' lt rgb 'red', \
     'data_ALE_625.txt' u 1:3 w l t 'Y - ALE' lt rgb 'blue'; \
   set ylabel 'Z (m)'; \
   set title 'Z component - 625 nodes'; \
   p 'data_TLF_625.txt' u 1:4 w l t 'Z - TLF' lt rgb 'red', \
     'data_ALE_625.txt' u 1:4 w l t 'Z - ALE' lt rgb 'blue'; \

    set ylabel 'X (m)'; \
   set title 'X component - 3969 nodes'; \
   p 'data_TLF_3969.txt' u 1:2 w l t 'X - TLF' lt rgb 'red', \
     'data_ALE_3969.txt' u 1:2 w l t 'X - ALE' lt rgb 'blue'; \
   set ylabel 'Y (m)'; \
   set title 'Y component - 3969 nodes'; \
   p 'data_TLF_3969.txt' u 1:3 w l t 'Y - TLF' lt rgb 'red', \
     'data_ALE_3969.txt' u 1:3 w l t 'Y - ALE' lt rgb 'blue'; \
   set ylabel 'Z (m)'; \
   set title 'Z component - 3969 nodes'; \
   p 'data_TLF_3969.txt' u 1:4 w l t 'Z - TLF' lt rgb 'red', \
     'data_ALE_3969.txt' u 1:4 w l t 'Z - ALE' lt rgb 'blue'; \

    set ylabel 'X (m)'; \
   set title 'X component - 28033 nodes'; \
   p 'data_TLF_28033.txt' u 1:2 w l t 'X - TLF' lt rgb 'red', \
     'data_ALE_28033.txt' u 1:2 w l t 'X - ALE' lt rgb 'blue'; \
   set ylabel 'Y (m)'; \
   set title 'Y component - 28033 nodes'; \
   p 'data_TLF_28033.txt' u 1:3 w l t 'Y - TLF' lt rgb 'red', \
     'data_ALE_28033.txt' u 1:3 w l t 'Y - ALE' lt rgb 'blue'; \
   set ylabel 'Z (m)'; \
   set title 'Z component - 28033 nodes'; \
   p 'data_TLF_28033.txt' u 1:4 w l t 'Z - TLF' lt rgb 'red', \
     'data_ALE_28033.txt' u 1:4 w l t 'Z - ALE' lt rgb 'blue'; \

 unset multiplot;";
rm *.txt
echo -e "\e[1A\e[K Plotting the data [$OK]"






#p 'datamod.txt' u 1:2 w lp title 'X', 'datamod.txt' u 1:3 w lp title 'Y', 'datamod.txt' u 1:4 w lp title 'Z'
